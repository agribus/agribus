// <auto-generated />
using System;
using Agribus.Postgres.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agribus.Postgres.Migrations
{
    [DbContext(typeof(AgribusDbContext))]
    partial class AgribusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.AlertAggregates.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<Guid>("GreenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("greenhouse_id");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("MeasureType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measure_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("RangeMaxValue")
                        .HasColumnType("double precision")
                        .HasColumnName("range_max_value");

                    b.Property<double>("RangeMinValue")
                        .HasColumnType("double precision")
                        .HasColumnName("range_min_value");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rule_type");

                    b.Property<double>("ThresholdValue")
                        .HasColumnType("double precision")
                        .HasColumnName("threshold_value");

                    b.HasKey("Id")
                        .HasName("pk_alert");

                    b.HasIndex("GreenhouseId")
                        .HasDatabaseName("ix_alert_greenhouse_id");

                    b.ToTable("alert", null, t =>
                        {
                            t.HasCheckConstraint("CK_MeasureType_IsValid", "measure_type IN ('temperature', 'humidity', 'pressure', 'motion', 'rssi', 'neighbors', 'unknown')");

                            t.HasCheckConstraint("CK_RuleType_IsValid", "rule_type IN ('above', 'below', 'outside', 'inside')");
                        });
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.AlertAggregates.AlertEvents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlertId")
                        .HasColumnType("uuid")
                        .HasColumnName("alert_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("MeasureValue")
                        .HasColumnType("double precision")
                        .HasColumnName("measure_value");

                    b.Property<DateTimeOffset>("OccuredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("occured_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("SensorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sensor_id");

                    b.HasKey("Id")
                        .HasName("pk_alert_events");

                    b.HasIndex("AlertId")
                        .HasDatabaseName("ix_alert_events_alert_id");

                    b.HasIndex("SensorId")
                        .HasDatabaseName("ix_alert_events_sensor_id");

                    b.ToTable("alert_events", (string)null);
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.GreenhouseAggregates.Greenhouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Crops")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("crops");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_id")
                        .HasComment("user table is currently stored in an external database (Clerk)");

                    b.HasKey("Id")
                        .HasName("pk_greenhouse");

                    b.ToTable("greenhouse", null, t =>
                        {
                            t.HasComment("Greenhouses table stores information about greenhouse facilities.");
                        });
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.SensorAggregates.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("GreenhouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("greenhouse_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("source_address");

                    b.HasKey("Id")
                        .HasName("pk_sensor");

                    b.HasIndex("GreenhouseId")
                        .HasDatabaseName("ix_sensor_greenhouse_id");

                    b.ToTable("sensor", null, t =>
                        {
                            t.HasComment("Sensors table stores information about sensors used in the system.");

                            t.HasCheckConstraint("CK_Sensor_Model_IsValid", "sensor_model IN ('RuuviTag', 'RuuviTagPro', 'Unknown')");
                        });
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.AlertAggregates.Alert", b =>
                {
                    b.HasOne("Agribus.Core.Domain.AggregatesModels.GreenhouseAggregates.Greenhouse", "Greenhouse")
                        .WithMany("Alerts")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alert_greenhouse_greenhouse_id");

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.AlertAggregates.AlertEvents", b =>
                {
                    b.HasOne("Agribus.Core.Domain.AggregatesModels.AlertAggregates.Alert", "Alert")
                        .WithMany("AlertEvents")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alert_events_alert_alert_id");

                    b.HasOne("Agribus.Core.Domain.AggregatesModels.SensorAggregates.Sensor", "Sensor")
                        .WithMany("AlertEvents")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_alert_events_sensor_sensor_id");

                    b.Navigation("Alert");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.SensorAggregates.Sensor", b =>
                {
                    b.HasOne("Agribus.Core.Domain.AggregatesModels.GreenhouseAggregates.Greenhouse", "Greenhouse")
                        .WithMany("Sensors")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sensor_greenhouse_greenhouse_id");

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.AlertAggregates.Alert", b =>
                {
                    b.Navigation("AlertEvents");
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.GreenhouseAggregates.Greenhouse", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Agribus.Core.Domain.AggregatesModels.SensorAggregates.Sensor", b =>
                {
                    b.Navigation("AlertEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
