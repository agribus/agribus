name: Build & Deploy Prod

on:
  push:
    branches:
      - main
  workflow_dispatch:


jobs:
  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image Lychee
        run: |
          docker build \
            -t agribus/lychee:prod \
            -t agribus/lychee:${{ env.VERSION }} \
            -f ./docker/Dockerfile.lychee .

      - name: Build Docker image Tomato
        run: |
          docker build \
            -t agribus/tomato:prod \
            -t agribus/tomato:${{ env.VERSION }} \
            -f ./docker/Dockerfile.tomato .

      - name: Push Docker images
        run: |
          docker push agribus/lychee:prod
          docker push agribus/lychee:${{ env.VERSION }}        
          docker push agribus/tomato:prod
          docker push agribus/tomato:${{ env.VERSION }}

  deploy:
    name: Deploy Compose Prod
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH Deploy (Pull & Restart Compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /srv/docker/agribus

            echo "==> Pull & Restarting Prod stack"
            docker compose -f ./docker/compose.prod.yaml --env-file .env.prod up -d --pull always --remove-orphans

            echo "âœ… Prod updated with image: ${{ env.VERSION }}"
